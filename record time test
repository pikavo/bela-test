#include <stdio.h>
#include <time.h>

int main() {
	clock_t start, end;
	double result;

	start = clock(); // record time start

#define TRUE 1
#define FALSE 0

#define BLOCK_SIZE 16

#define ANALOG_INPUT_LEFT_CHANNEL 0
#define ANALOG_INPUT_RIGHT_CHANNEL 1
#define ANALOG_OUTPUT_LEFT_CHANNEL 0
#define ANALOG_OUTPUT_RIGHT_CHANNEL 1

#define W_LENGTH 128
#define S_LENGTH 512
#define x1_vec_length 500000
#define MU 0.01
#define DELTA 0.001

#define MSE_THRESHOLD 0.001

#include <Bela.h>
#include <algorithm>
#include <libraries/Scope/Scope.h>

#include <stdlib.h>
#include <stdio.h>
#include <time.h>

// Sine synthesis
	float gFrequency = 68.0;
	float gFrequency2 = 136.0;
	float gPhase;
	float gPhase2;
	float gInverseSampleRate;



	int gAudioChannelNum; // number of audio channels to iterate over
	int gAnalogChannelNum; // number of analog channels to iterate over

	Scope scope;

	float w_vec[W_LENGTH];
	float xsw_vec[W_LENGTH];
	float x1_vec[x1_vec_length];
	float g_samplerate[x1_vec_length];
	float x_vec[S_LENGTH];
	float norm_factor = 0.0;

	float* value_in_block;
	float* value_out_block;

	FILE* fp;
	bool file_flag = FALSE;
	bool file_flag2 = FALSE;

	float value_out = 0.0;
	float value_in = 0.0;
	float err = 0.0;
	float grad_coeff = 0.0;
	float MSE = 10.0;
	float smooth_factor = 0.99;
	int j = 0;

	float xsw = 0.0;

	bool setup(BelaContext * context, void* userData)
	{
		scope.setup(1, context->audioSampleRate);
		// Check that we have the same number of inputs and outputs.
		if (context->audioInChannels != context->audioOutChannels ||
			context->analogInChannels != context->analogOutChannels) {
			printf("Different number of outputs and inputs available. Working with what we have.\n");
		}

		gInverseSampleRate = 1.0 / context->audioSampleRate;
		gPhase = 0.0;
		gPhase2 = 1.0;

		// If the amout of audio and analog input and output channels is not the same
		// we will use the minimum between input and output
		gAudioChannelNum = std::min(context->audioInChannels, context->audioOutChannels);
		gAnalogChannelNum = std::min(context->analogInChannels, context->analogOutChannels);

		for (unsigned int i = 0; i < x1_vec_length; i++) {
			x1_vec[i] = 0.0;
			g_samplerate[i] = 0.0;
		}

		for (unsigned int i = 0; i < W_LENGTH; i++) {
			w_vec[i] = 0.0;
			xsw_vec[i] = 0.0;
		}
		for (unsigned int i = 0; i < S_LENGTH; i++) {
			x_vec[i] = 0.0;
		}

		return true;
	}

	void render(BelaContext * context, void* userData)
	{

		float x1 = 0.0;
		// Simplest possible case: pass inputs through to outputs
		for (unsigned int n = 0; n < context->audioFrames; n++) {

			value_in = audioRead(context, n, ANALOG_INPUT_LEFT_CHANNEL);

			x1 = 0.8f * sinf(gPhase) + 0.8f * sinf(gPhase2);

			if (j < x1_vec_length) {
				x1_vec[j] = x1;
				g_samplerate[j] = gInverseSampleRate;
			}

			j += 1;

			gPhase += 2.0f * (float)M_PI * gFrequency * gInverseSampleRate;
			if (gPhase > M_PI)
				gPhase -= 2.0f * (float)M_PI;
			gPhase2 += 2.0f * (float)M_PI * gFrequency2 * gInverseSampleRate;
			if (gPhase2 > M_PI)
				gPhase2 -= 2.0f * (float)M_PI;

		}
		// After block signal is appended, NLMS algorithm run!

		if (j >= x1_vec_length && file_flag == FALSE) {
			fp = fopen("/root/Bela/projects/x1_vec/x1_vec.h", "w");
			fprintf(fp, "float x1_vec[%d] = { \n", x1_vec_length);
			for (unsigned int i = 0; i < x1_vec_length - 1; i++) {
				fprintf(fp, "%f, \n", x1_vec[i]);
			}
			fprintf(fp, "%f };", x1_vec[x1_vec_length - 1]);
			fclose(fp);
			file_flag = TRUE;
			rt_printf("File saved \n");

		}
		if (j >= x1_vec_length && file_flag2 == FALSE) {
			fp = fopen("/root/Bela/projects/x1_vec/g_samplerate.h", "w");
			fprintf(fp, "float g_samplerate[%d] = { \n", x1_vec_length);
			for (unsigned int i = 0; i < x1_vec_length - 1; i++) {
				fprintf(fp, "%f, \n", g_samplerate[i]);
			}
			fprintf(fp, "%f };", g_samplerate[x1_vec_length - 1]);
			fclose(fp);
			file_flag2 = TRUE;
			rt_printf("File saved \n");

		}

	}

	void cleanup(BelaContext * context, void* userData)
	{

	}

	end = clock(); //record time end
	result = (double)(end - start);

	// result
	cout << "result : " << ((result) / CLOCKS_PER_SEC) << " seconds" << endl;
	printf("%f", result / CLOCKS_PER_SEC);
	// OR cout << "result : " << result << " microseconds" << endl;
	// OR printf("%f", result);

	return 0;
}
